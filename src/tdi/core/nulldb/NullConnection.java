package tdi.core.nulldb;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class NullConnection implements Connection {

	public NullConnection(String url, Properties info) {}

	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
		return false;
	}

	public <T> T unwrap(Class<T> arg0) throws SQLException {
		return null;
	}

	public void abort(Executor executor) throws SQLException {}

	public void clearWarnings() throws SQLException {}

	public void close() throws SQLException {}

	public void commit() throws SQLException {}

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		return null;
	}

	public Blob createBlob() throws SQLException {
		return null;
	}

	public Clob createClob() throws SQLException {
		return null;
	}

	public NClob createNClob() throws SQLException {
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		return null;
	}

	public Statement createStatement() throws SQLException {
		return NullStatement();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return NullStatement();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return NullStatement();
	}

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		return null;
	}

	public boolean getAutoCommit() throws SQLException {
		return true;
	}

	public String getCatalog() throws SQLException {
		return "";
	}

	public Properties getClientInfo() throws SQLException {
		return new Properties();
	}

	public String getClientInfo(String name) throws SQLException {
		return "";
	}

	public int getHoldability() throws SQLException {
		return 0;
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		InvocationHandler handler = new InvocationHandler() {
			public Object invoke(Object obj, Method method, Object[] aobj) {
				try {
					return method.getReturnType().newInstance();
				}
				catch (Exception e) {
					return null;
				}
			}			
		};
		DatabaseMetaData proxy = (DatabaseMetaData) Proxy.newProxyInstance(
			DatabaseMetaData.class.getClassLoader(), new Class[] { DatabaseMetaData.class },
            handler
        );
		return proxy;
	}

	public int getNetworkTimeout() throws SQLException {
		return 0;
	}

	public String getSchema() throws SQLException {
		return "";
	}

	public int getTransactionIsolation() throws SQLException {
		return 0;
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return null;
	}

	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	public boolean isClosed() throws SQLException {
		return false;
	}

	public boolean isReadOnly() throws SQLException {
		return true;
	}

	public boolean isValid(int timeout) throws SQLException {
		return true;
	}

	public String nativeSQL(String sql) throws SQLException {
		return sql;
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return NullStatement();
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return NullStatement();
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		return NullStatement();
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return NullStatement();
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return NullStatement();
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return NullStatement();
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return NullStatement();
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return NullStatement();
	}

	private InvocationHandler newInvocationHandler(final Class<?> clazz) {
		InvocationHandler handler = new InvocationHandler() {
			public Object invoke(Object obj, Method method, Object[] aobj) {
				try {
					if (method.getReturnType().isPrimitive()) {
						if (boolean.class.equals(method.getReturnType()))
							return false;
						if (byte.class.equals(method.getReturnType()))
							return (byte)0;
						if (short.class.equals(method.getReturnType()))
							return (short)0;
						if (int.class.equals(method.getReturnType()))
							return 0;						
						if (long.class.equals(method.getReturnType()))
							return 0L;
						if (char.class.equals(method.getReturnType()))
							return ' ';
						if (float.class.equals(method.getReturnType()))
							return (float)0.0;
						if (double.class.equals(method.getReturnType()))
							return 0.0;
						if (void.class.equals(method.getReturnType()))
							return null;
					}
					return method.getReturnType().newInstance();
				}
				catch (Exception e) {					
					Class<?> klass = method.getReturnType();
					Object proxy = Proxy.newProxyInstance(
							clazz.getClassLoader(), new Class[] { klass },
							newInvocationHandler(klass)
					);
					return klass.cast(proxy);
				}
			}			
		};
		return handler;
	}
	private CallableStatement NullStatement() {
		CallableStatement proxy = (CallableStatement) Proxy.newProxyInstance(
			CallableStatement.class.getClassLoader(), new Class[] { CallableStatement.class },
            newInvocationHandler(CallableStatement.class)
        );
		return proxy;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		return NullStatement();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {}

	public void rollback() throws SQLException {}

	public void rollback(Savepoint savepoint) throws SQLException {}

	public void setAutoCommit(boolean autoCommit) throws SQLException {}

	public void setCatalog(String catalog) throws SQLException {}

	public void setClientInfo(Properties properties) throws SQLClientInfoException {}

	public void setClientInfo(String name, String value) throws SQLClientInfoException {}

	public void setHoldability(int holdability) throws SQLException {}

	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {}

	public void setReadOnly(boolean readOnly) throws SQLException {}

	public Savepoint setSavepoint() throws SQLException {
		return null;
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return null;
	}

	public void setSchema(String schema) throws SQLException {}

	public void setTransactionIsolation(int level) throws SQLException {}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {}

}
